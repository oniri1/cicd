# XML을 대체하는 문서 / YML, YXML
#액션에 대한 이름
# Tap을 기준으로 영역을 나누기 때문에 잘 해야한다.

name: Deploy React to EC2

# 메인 브랜치에 푸쉬가 되었을 때(on) , push를 merge, rebase등으로도 바꿀 수 있다.

# 했을 때
on:
  # push 했을 때
  push:
    # 메인 브랜치에
    branches:
      - main

# 작업들
jobs:
  # 작업명
  test:
    #작업 환경
    runs-on: ubuntu-latest
    #작업들을 순서에 맞춰서 작성
    steps:
      #작업명은 testing이고
      - name: "testing"
        run: echo "now test"
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # import

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}
      #적어놔야 키를 받아온다.
      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Install dependencies of project
        working-directory: ./
        run: npm i

      - name: Build project
        working-directory: ./
        run: npm run build

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p /var/www/html"
          rsync -avz -e "ssh" ./build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/html
        # rsync === filezilla
        # 현재 폴더의 build 폴더를 EC2 유저로 EC2 인스턴스에 접속해서 /var/www/html 폴더에 복사해달라
        # -e "ssh" == 접속 방법에 대한 설정
        # -avz == 설정, 옵션
        # -a : 전부
        # -v : 출력
        # -z : 권한, 소유자, 그룹 유지
